import asyncio
import json
import logging
import random
import time
from typing import List
from datetime import datetime

from faststream import FastStream, Logger
from pydantic import BaseModel
from sqlalchemy import select, and_

from .redis_utils import RedisClient
from src.cfg import config
from src.db import get_session
from src.db.models import Account, CommentActivity
from src.params.db_manager import DatabaseManager

broker = config.broker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - [%(filename)s:%(lineno)d] - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã Redis
TASK_QUEUE_PREFIX = "arto_task:"
TASK_TYPE = "comment_task"

app = FastStream(broker)

from .task_models import CommentTask, CommentTaskMessage, LikeCommentTask, LikeCommentTaskMessage

async def save_task_to_redis(task_data: dict) -> str:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ Redis"""
    try:
        redis = await RedisClient.get_redis()
        task_id = f"{TASK_QUEUE_PREFIX}{time.time_ns()}"

        if not task_data:
            raise ValueError("–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")

        task_json = json.dumps(task_data, ensure_ascii=False)

        logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ Redis. ID: {task_id}, –¥–∞–Ω–Ω—ã–µ: {task_data}")

        await redis.hset(task_id, mapping={
            "type": TASK_QUEUE_PREFIX.rstrip(':'),
            "data": task_json,
            "created_at": str(time.time()),
            "status": "pending",
            "attempts": "0"
        })
        await redis.expire(task_id, 86400)
        return task_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        raise

async def execute_and_delete_task(task_id: str, processor: callable, args: list):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –∏ —É–¥–∞–ª—è–µ—Ç –µ—ë –∏–∑ Redis"""
    redis = await RedisClient.get_redis()
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id}")

        result = await processor(*args)
        await redis.delete(task_id)

        logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞")
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        await redis.delete(task_id)
        raise

async def execute_delayed_task(task_id: str, processor: callable, args: list, delay: float):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
    try:
        if delay > 0:
            logger.debug(f"–ó–∞–¥–∞—á–∞ {task_id}: –æ–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º")
            await asyncio.sleep(delay)

        logger.debug(f"–ó–∞–¥–∞—á–∞ {task_id}: –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏")
        return await execute_and_delete_task(task_id, processor, args)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        raise

@broker.subscriber("comment_tasks")
async def handle_comment_tasks(msg: CommentTaskMessage):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—â–µ–π—Å—è –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    try:
        logger.info(f"üì® [TASKS] –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è –∑–∞–¥–∞—á: {len(msg.data)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É
        for i, task in enumerate(msg.data):
            logger.info(f"üìã [TASK-{i+1}] –ö–∞–Ω–∞–ª: {task.channel}, –ü–æ—Å—Ç: {task.post_id}, –ê–∫–∫–∞—É–Ω—Ç: {task.account_number}")
            logger.info(f"    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {task.comment_text[:100]}...")
            logger.info(f"    –ì—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {task.discussion_group_id}")
            

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–µ—Ä–∂–∫–∏ –∏–∑ –ë–î
        logger.info(f"‚è±Ô∏è [DELAY] –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–µ—Ä–∂–∫–∏ –∏–∑ –ë–î...")
        db_manager = DatabaseManager()
        async with db_manager:
            base_delay, delay_spread = await db_manager.get_delay_parameters()
            logger.info(f"‚è±Ô∏è [DELAY] –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {base_delay} –º–∏–Ω, —Ä–∞–∑–±—Ä–æ—Å: {delay_spread} –º–∏–Ω")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
            base_delay = base_delay * 60
            delay_spread = delay_spread * 60
            logger.info(f"‚è±Ô∏è [DELAY] –í —Å–µ–∫—É–Ω–¥–∞—Ö - –±–∞–∑–∞: {base_delay}, —Ä–∞–∑–±—Ä–æ—Å: {delay_spread}")

        task_ids = []
        cumulative_delay = 0.0

        for i, item in enumerate(msg.data):
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–∑–±—Ä–æ—Å–∞
                current_delay = base_delay + random.uniform(-delay_spread, delay_spread)
                current_delay = max(0.1, current_delay)

                # –î–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–µ
                cumulative_delay += current_delay
                item.delay = cumulative_delay

                logger.info(f"‚è±Ô∏è [DELAY] –ó–∞–¥–∞—á–∞ {i+1}: —Ç–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ {current_delay:.2f}—Å, –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è {cumulative_delay:.2f}—Å")

                task_id = await save_task_to_redis(item.model_dump())
                task_ids.append(task_id)
                logger.info(f"üíæ [REDIS] –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Redis: {task_id}")

                asyncio.create_task(
                    execute_delayed_task(
                        task_id,
                        process_comment_task,
                        [item],
                        cumulative_delay
                    )
                )
                logger.info(f"üöÄ [LAUNCH] –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {cumulative_delay:.2f}—Å")

            except Exception as e:
                logger.error(f"‚ùå [TASK-ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ {i+1}: {e}")
                continue

        logger.info(f"‚úÖ [TASKS] –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {len(task_ids)} –∑–∞–¥–∞—á —Å –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—â–µ–π—Å—è –∑–∞–¥–µ—Ä–∂–∫–æ–π")
        return {"status": "success", "task_ids": task_ids}

    except Exception as e:
        logger.error(f"‚ùå [TASKS-CRITICAL] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        raise

@broker.subscriber("like_comment_tasks")
async def handle_like_comment_tasks(msg: LikeCommentTaskMessage):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á –ª–∞–π–∫–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    try:
        logger.info(f"üì® [TASKS] –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è –∑–∞–¥–∞—á –ª–∞–π–∫–æ–≤: {len(msg.data)} –ª–∞–π–∫–æ–≤")

        task_ids = []
        for item in msg.data:
            try:
                task_id = await save_task_to_redis(item.model_dump())
                task_ids.append(task_id)

                asyncio.create_task(
                    execute_delayed_task(
                        task_id,
                        process_like_comment_task,
                        [item],
                        item.delay
                    )
                )

            except Exception as e:
                logger.error(f"‚ùå [LIKE-ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ –ª–∞–π–∫–∞: {e}")
                continue

        logger.info(f"‚úÖ [TASKS] –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {len(task_ids)} –∑–∞–¥–∞—á –ª–∞–π–∫–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        return {"status": "success", "task_ids": task_ids}

    except Exception as e:
        logger.error(f"‚ùå [TASKS-CRITICAL] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –ª–∞–π–∫–æ–≤: {e}")
        raise

async def _handle_comment_error(account_number: str, error_message: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ—à–∏–±–∫–∏"""
    from src.accounts.recovery import AccountRecoveryManager
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é
    error_type = 'normal'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—ã—á–Ω–∞—è –æ—à–∏–±–∫–∞
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    critical_errors = [
        'AuthKeyError', 'ApiIdInvalidError', 'SessionPasswordNeededError',
        'AuthKeyInvalidError', 'AccessTokenExpiredError'
    ]
    
    # FloodWait –æ—à–∏–±–∫–∏
    flood_wait_errors = ['FloodWaitError', '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–∂–∏–¥–∞–Ω–∏–µ']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
    for critical in critical_errors:
        if critical in error_message:
            error_type = 'critical'
            break
    
    if error_type == 'normal':
        for flood in flood_wait_errors:
            if flood in error_message:
                error_type = 'flood_wait'
                break
    
    # –ü–µ—Ä–µ–¥–∞–µ–º –≤ —Å–∏—Å—Ç–µ–º—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    await AccountRecoveryManager.handle_account_error(
        account_number=account_number,
        error_type=error_type,
        error_message=error_message
    )

async def process_comment_task(task: CommentTask):
    from src.accounts.comment import post_comment_with_session
    from telethon.tl.types import ReactionEmoji

    # –û—Ç–ª–∞–¥–∫–∞ –∑–∞–¥–∞—á–∏
    logger.info(f"üêõ [TASK DEBUG] [{task.account_number}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏:")
    logger.info(f"  Channel: '{task.channel}'")
    logger.info(f"  Comment text: '{task.comment_text}'")
    logger.info(f"  Comment length: {len(task.comment_text)}")
    logger.info(f"  Discussion group ID: {task.discussion_group_id}")
    logger.info(f"  Post ID: {task.post_id}")
    logger.info(f"  Invite link: {task.invite_link}")

    class MockChat:
        def __init__(self, chat_id, chat_type='supergroup'):
            self.id = chat_id
            self.type = chat_type
            self.username = None
            self.title = f"Group {chat_id}"

    class MockMessage:
        def __init__(self, chat, message_id, sender_chat_id=None):
            self.chat = chat
            self.message_id = message_id
            # –°–æ–∑–¥–∞–µ–º sender_chat –µ—Å–ª–∏ –µ—Å—Ç—å ID
            if sender_chat_id:
                self.sender_chat = type('obj', (object,), {'id': sender_chat_id})
            else:
                self.sender_chat = None

    try:
        logger.info(f"üìù [PROCESS] [{task.account_number}] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {task.discussion_group_id}, –ø–æ—Å—Ç {task.post_id}")

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–∞–∫ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç
        mock_chat = MockChat(task.discussion_group_id)
        mock_message = MockMessage(
            chat=mock_chat,
            message_id=task.post_id,
            sender_chat_id=task.sender_chat_id
        )

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏
        available_reactions = [ReactionEmoji(emoticon=emoji) for emoji in task.reaction_types]

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        result = await post_comment_with_session(
            session_data=task.account_session,
            message=mock_message,
            comment_text=task.comment_text,
            like_chance=task.like_chance,
            available_reactions=available_reactions,
            invite_link=task.invite_link,
            account_number=task.account_number,
            channel_username=task.channel_username
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ë–î
        async with get_session() as session:
            account = await session.get(Account, task.account_number)
            if account:
                if result["comment_sent"]:
                    account.comments_sent += 1
                if result["like_given"]:
                    account.likes_given += 1
                if result["joined_group"]:
                    account.joined_group = True
                account.last_activity = datetime.now()
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –ª–∞–π–∫–æ–≤
                if result["comment_sent"] and result["comment_id"]:
                    logger.info(f"üíæ [SAVE] [{task.account_number}] –°–æ—Ö—Ä–∞–Ω—è–µ–º CommentActivity: comment_id={result['comment_id']}")
                    
                    comment_activity = CommentActivity(
                        channel_name=str(task.discussion_group_id),  # ID –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
                        post_id=task.post_id,
                        comment_id=result["comment_id"],
                        account_number=task.account_number
                    )
                    session.add(comment_activity)
                    logger.info(f"‚úÖ [SAVE] [{task.account_number}] CommentActivity —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–∞–π–∫–æ–≤")
                
                await session.commit()
                logger.info(f"üíæ [SAVE] [{task.account_number}] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")

        if result["success"]:
            logger.info(f"‚úÖ [PROCESS] [{task.account_number}] –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {task.discussion_group_id}")
            if result["comment_id"]:
                logger.info(f"üÜî [PROCESS] [{task.account_number}] ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {result['comment_id']} (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –ª–∞–π–∫–æ–≤)")
        else:
            logger.warning(f"‚ö†Ô∏è [PROCESS] [{task.account_number}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –≥—Ä—É–ø–ø—É {task.discussion_group_id}: {result.get('error')}")

        return result

    except Exception as e:
        logger.error(f"‚ùå [PROCESS] [{task.account_number}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        raise

async def process_like_comment_task(task: LikeCommentTask):
    from src.accounts.comment import like_comment_with_session
    from telethon.tl.types import ReactionEmoji

    try:
        logger.info(f"üëç [LIKE] [{task.account_number}] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∞–π–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
        logger.info(f"üëç [LIKE] [{task.account_number}] –ò—â–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {task.target_comment_account}")

        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        comment_id = task.comment_id
        group_id = task.discussion_group_id
        
        if comment_id == 0:
            logger.info(f"üëç [LIKE] [{task.account_number}] Comment ID = 0, –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            
            async with get_session() as session:
                # –ò—â–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ—Å—Ç—É
                comment_activity = await session.execute(
                    select(CommentActivity)
                    .where(and_(
                        CommentActivity.account_number == task.target_comment_account,
                        CommentActivity.post_id == task.post_id,
                        CommentActivity.channel_name == str(task.discussion_group_id)
                    ))
                    .order_by(CommentActivity.created_at.desc())
                    .limit(1)
                )
                comment_activity = comment_activity.scalar_one_or_none()
                
                if comment_activity:
                    comment_id = comment_activity.comment_id
                    group_id = int(comment_activity.channel_name)
                    logger.info(f"‚úÖ [LIKE] [{task.account_number}] –ù–∞–π–¥–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ID: {comment_id} –≤ –≥—Ä—É–ø–ø–µ {group_id}")
                else:
                    logger.warning(f"‚ùå [LIKE] [{task.account_number}] –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {task.target_comment_account} –∫ –ø–æ—Å—Ç—É {task.post_id}")
                    return False
        
        if not group_id:
            group_id = task.discussion_group_id

        if not group_id or not comment_id:
            logger.error(f"‚ùå [LIKE] [{task.account_number}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å group_id ({group_id}) –∏–ª–∏ comment_id ({comment_id})")
            return False

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏
        available_reactions = [ReactionEmoji(emoticon=emoji) for emoji in task.reaction_types]

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ª–∞–π–∫–∞
        success = await like_comment_with_session(
            session_data=task.account_session,
            group_id=group_id,
            comment_id=comment_id,
            available_reactions=available_reactions,
            account_number=task.account_number
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if success:
            async with get_session() as session:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
                account = await session.get(Account, task.account_number)
                if account:
                    account.likes_given += 1
                    account.last_activity = datetime.now()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                comment_activity = await session.execute(
                    select(CommentActivity)
                    .where(CommentActivity.comment_id == comment_id)
                )
                comment_activity = comment_activity.scalar_one_or_none()
                if comment_activity:
                    comment_activity.likes_received += 1

                await session.commit()
                logger.info(f"‚úÖ [LIKE] [{task.account_number}] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

        return success

    except Exception as e:
        logger.error(f"‚ùå [LIKE] [{task.account_number}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ –ª–∞–π–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        raise

async def restore_tasks():
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    try:
        logger.info("–ù–∞—á–∞–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ Redis")
        redis = await RedisClient.get_redis()
        restored = 0

        async for key in redis.scan_iter(match=f"{TASK_QUEUE_PREFIX}*"):
            try:
                task_data = await redis.hgetall(key)

                if not task_data or b'data' not in task_data:
                    logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É {key}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ")
                    await redis.delete(key)
                    continue

                try:
                    task_dict = json.loads(task_data[b'data'].decode('utf-8'))
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏ —Å–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç
                    if 'comment_text' in task_dict:
                        task_obj = CommentTask(**task_dict)
                        processor = process_comment_task
                    elif 'comment_id' in task_dict:
                        task_obj = LikeCommentTask(**task_dict)
                        processor = process_like_comment_task
                    else:
                        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: {key}")
                        await redis.delete(key)
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL –∑–∞–¥–∞—á–∏
                    ttl = await redis.ttl(key)
                    if ttl < 0:
                        logger.warning(f"–ó–∞–¥–∞—á–∞ {key} –∏—Å—Ç–µ–∫–ª–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        await redis.delete(key)
                        continue

                    logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {key.decode()}")

                    asyncio.create_task(
                        execute_delayed_task(
                            key.decode(),
                            processor,
                            [task_obj],
                            task_obj.delay
                        )
                    )
                    restored += 1

                except json.JSONDecodeError:
                    logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è –∑–∞–¥–∞—á–∏ {key}")
                    await redis.delete(key)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {key}: {e}")
                continue

        logger.info(f"–í—Å–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {restored}")
        return restored
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
        raise

async def cleanup_broken_tasks():
    """–û—á–∏—Å—Ç–∫–∞ –±–∏—Ç—ã—Ö –∑–∞–¥–∞—á –∏–∑ Redis"""
    try:
        redis = await RedisClient.get_redis()
        deleted = 0

        async for key in redis.scan_iter(match=f"{TASK_QUEUE_PREFIX}*"):
            task_data = await redis.hgetall(key)
            if not task_data or b'data' not in task_data:
                await redis.delete(key)
                deleted += 1

        logger.info(f"–£–¥–∞–ª–µ–Ω–æ –±–∏—Ç—ã—Ö –∑–∞–¥–∞—á: {deleted}")
        return deleted
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∏—Ç—ã—Ö –∑–∞–¥–∞—á: {e}")
        raise

@app.on_startup
async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–¥–∞—á...")
        await cleanup_broken_tasks()
        await restore_tasks()
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")
        raise

@app.on_shutdown
async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–¥–∞—á...")
        await RedisClient.close_redis()
        logger.info("Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")
