# src/accounts/recovery.py
import asyncio
import logging
from datetime import datetime, timedelta
from typing import List
from sqlalchemy import select, and_
from src.db import get_session
from src.db.models import Account
from src.accounts.session import is_account_valid

logger = logging.getLogger(__name__)

class AccountRecoveryManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
    PAUSE_CHECK_INTERVAL = timedelta(hours=3)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ –ø–∞—É–∑–µ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
    BAN_CHECK_INTERVAL = timedelta(days=3)     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è
    MAX_FAILS_FOR_PAUSE = 3                   # –ú–∞–∫—Å–∏–º—É–º –æ—à–∏–±–æ–∫ –¥–ª—è –ø–∞—É–∑—ã
    MAX_FAILS_FOR_BAN = 3                     # –ú–∞–∫—Å–∏–º—É–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –¥–ª—è –±–∞–Ω–∞
    
    @classmethod
    async def handle_account_error(cls, account_number: str, error_type: str, error_message: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ —Å—Ç–∞—Ç—É—Å
        
        Args:
            account_number: –ù–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞
            error_type: –¢–∏–ø –æ—à–∏–±–∫–∏ ('critical', 'flood_wait', 'normal')
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        """
        async with get_session() as session:
            account = await session.get(Account, account_number)
            if not account:
                logger.error(f"–ê–∫–∫–∞—É–Ω—Ç {account_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return
            
            now = datetime.now()
            account.last_error = error_message
            account.last_error_time = now
            account.total_fails += 1
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
            if error_type == 'critical':
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: AuthKeyError, ApiIdInvalidError –∏ —Ç.–¥.
                account.fail += 1
                if account.fail >= cls.MAX_FAILS_FOR_BAN:
                    account.status = 'ban'
                    account.pause_reason = 'critical_error'
                    account.next_check_time = now + cls.BAN_CHECK_INTERVAL
                    logger.warning(f"–ê–∫–∫–∞—É–Ω—Ç {account_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ë–ê–ù –ø–æ—Å–ª–µ {account.fail} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫")
                else:
                    account.status = 'pause'
                    account.pause_reason = 'critical_error'
                    account.next_check_time = now + cls.PAUSE_CHECK_INTERVAL
                    logger.warning(f"–ê–∫–∫–∞—É–Ω—Ç {account_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ü–ê–£–ó–£ –ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ ({account.fail}/{cls.MAX_FAILS_FOR_BAN})")
                    
            elif error_type == 'flood_wait':
                # FloodWait - —Å—Ä–∞–∑—É –Ω–∞ –ø–∞—É–∑—É
                account.status = 'pause'
                account.pause_reason = 'flood_wait'
                account.next_check_time = now + cls.PAUSE_CHECK_INTERVAL
                logger.warning(f"–ê–∫–∫–∞—É–Ω—Ç {account_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ü–ê–£–ó–£ –∏–∑-–∑–∞ FloodWait")
                
            elif error_type == 'normal':
                # –û–±—ã—á–Ω—ã–µ –æ—à–∏–±–∫–∏
                account.fail += 1
                if account.fail >= cls.MAX_FAILS_FOR_PAUSE:
                    account.status = 'pause'
                    account.pause_reason = 'error'
                    account.next_check_time = now + cls.PAUSE_CHECK_INTERVAL
                    logger.warning(f"–ê–∫–∫–∞—É–Ω—Ç {account_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ü–ê–£–ó–£ –ø–æ—Å–ª–µ {account.fail} –æ—à–∏–±–æ–∫")
            
            await session.commit()
    
    @classmethod
    async def get_accounts_for_recovery(cls) -> List[Account]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        now = datetime.now()
        
        async with get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ –ø–∞—É–∑–µ –∏–ª–∏ –≤ –±–∞–Ω–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            result = await session.execute(
                select(Account).where(
                    and_(
                        Account.status.in_(['pause', 'ban']),
                        Account.next_check_time <= now
                    )
                )
            )
            return result.scalars().all()
    
    @classmethod
    async def attempt_recovery(cls, account: Account) -> bool:
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
        
        Returns:
            bool: True –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.number}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞
        try:
            is_valid = await is_account_valid(account.session, account.number)
            
            if is_valid:
                # –ê–∫–∫–∞—É–Ω—Ç —Ä–∞–±–æ—á–∏–π - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                async with get_session() as session:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é –≤–µ—Ä—Å–∏—é –∏–∑ –ë–î
                    fresh_account = await session.get(Account, account.number)
                    if fresh_account:
                        fresh_account.status = 'active'
                        fresh_account.fail = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                        fresh_account.pause_reason = None
                        fresh_account.next_check_time = None
                        fresh_account.last_error = None
                        await session.commit()
                        
                        logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account.number} —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                        return True
            else:
                # –ê–∫–∫–∞—É–Ω—Ç –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                await cls._schedule_next_check(account)
                logger.warning(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {account.number} –≤—Å–µ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.number}: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            await cls._schedule_next_check(account)
            return False
    
    @classmethod
    async def _schedule_next_check(cls, account: Account):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞"""
        now = datetime.now()
        
        async with get_session() as session:
            fresh_account = await session.get(Account, account.number)
            if fresh_account:
                if fresh_account.status == 'ban':
                    fresh_account.next_check_time = now + cls.BAN_CHECK_INTERVAL
                else:  # pause
                    fresh_account.next_check_time = now + cls.PAUSE_CHECK_INTERVAL
                
                await session.commit()
                logger.info(f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.number}: {fresh_account.next_check_time}")
    
    @classmethod
    async def run_recovery_cycle(cls):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —Ü–∏–∫–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        accounts_to_check = await cls.get_accounts_for_recovery()
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(accounts_to_check)}")
        
        if not accounts_to_check:
            return
        
        recovered_count = 0
        for account in accounts_to_check:
            try:
                if await cls.attempt_recovery(account):
                    recovered_count += 1
                    
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                await asyncio.sleep(2)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.number}: {e}")
        
        logger.info(f"‚úÖ –¶–∏–∫–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {recovered_count}/{len(accounts_to_check)}")

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
async def account_recovery_background_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    logger.info("üöÄ –ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    
    while True:
        try:
            await AccountRecoveryManager.run_recovery_cycle()
            
            # –ñ–¥–µ–º 30 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
            await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            await asyncio.sleep(300)