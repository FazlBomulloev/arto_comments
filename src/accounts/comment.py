from telethon.errors import (
    ChannelPrivateError,
    FloodWaitError,
    ChatAdminRequiredError,
    ChatWriteForbiddenError,
    UsernameNotOccupiedError,
    UsernameInvalidError,
    InviteHashExpiredError,
    InviteHashInvalidError,
    UserAlreadyParticipantError
)
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.tl.functions.messages import GetMessagesViewsRequest, ImportChatInviteRequest
from telethon.tl.functions.channels import JoinChannelRequest
from src.cfg import config
from aiogram.types import Message
from telethon.errors import TypeNotFoundError
from telethon.tl.functions.messages import SendReactionRequest
from telethon.tl.types import ReactionEmoji
import asyncio
import random
import logging
import re

logger = logging.getLogger(__name__)

def extract_invite_hash(invite_link: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ö–µ—à –∏–∑ –∏–Ω–≤–∞–π—Ç —Å—Å—ã–ª–∫–∏ –∏–ª–∏ username –∏–∑ –æ–±—ã—á–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    patterns = [
        # –ò–Ω–≤–∞–π—Ç —Å—Å—ã–ª–∫–∏ —Å —Ö–µ—à–æ–º
        r't\.me/\+([A-Za-z0-9_-]+)',          # https://t.me/+HASH
        r't\.me/joinchat/([A-Za-z0-9_-]+)',   # https://t.me/joinchat/HASH
        # –û–±—ã—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª—ã
        r't\.me/([A-Za-z0-9_]+)'
    ]

async def join_channel_by_username(client, channel_username: str, account_number: str) -> bool:
    """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ username"""
    try:
        logger.info(f"üì∫ [CHANNEL] [{account_number}] –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {channel_username}")
        
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        clean_username = channel_username.lstrip('@')
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
            channel_entity = await client.get_entity(clean_username)
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
            await client(JoinChannelRequest(channel_entity))
            logger.info(f"‚úÖ [CHANNEL] [{account_number}] –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {channel_username}")
            return True
            
        except UserAlreadyParticipantError:
            logger.info(f"‚ÑπÔ∏è [CHANNEL] [{account_number}] –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª {channel_username}")
            return True
            
        except UsernameNotOccupiedError:
            logger.error(f"‚ùå [CHANNEL] [{account_number}] –ö–∞–Ω–∞–ª {channel_username} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
            
        except UsernameInvalidError:
            logger.error(f"‚ùå [CHANNEL] [{account_number}] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –∫–∞–Ω–∞–ª–∞: {channel_username}")
            return False
            
        except ChannelPrivateError:
            logger.error(f"‚ùå [CHANNEL] [{account_number}] –ö–∞–Ω–∞–ª {channel_username} –ø—Ä–∏–≤–∞—Ç–Ω—ã–π")
            return False
            
        except FloodWaitError as e:
            logger.warning(f"‚è≥ [CHANNEL] [{account_number}] –ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå [CHANNEL] [{account_number}] –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª: {type(e).__name__}: {e}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå [CHANNEL] [{account_number}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª: {type(e).__name__}: {e}")
        return False

async def join_group_by_invite(client, invite_link: str, account_number: str) -> bool:
    """–í—Å—Ç—É–ø–∞–µ—Ç –≤ –≥—Ä—É–ø–ø—É –ø–æ –∏–Ω–≤–∞–π—Ç —Å—Å—ã–ª–∫–µ –∏–ª–∏ username"""
    try:
        logger.info(f"üë• [GROUP] [{account_number}] –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É –ø–æ —Å—Å—ã–ª–∫–µ: {invite_link}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–µ—à/username –∏–∑ —Å—Å—ã–ª–∫–∏
        invite_hash = extract_invite_hash(invite_link)
        if not invite_hash:
            logger.error(f"‚ùå [GROUP] [{account_number}] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞: {invite_link}")
            return False
        
        logger.info(f"üîë [GROUP] [{account_number}] –ò–∑–≤–ª–µ—á–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {invite_hash}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏: –∏–Ω–≤–∞–π—Ç-—Ö–µ—à –∏–ª–∏ username
        is_invite_hash = any(char in "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=" for char in invite_hash) and len(invite_hash) > 10
        
        try:
            if is_invite_hash and (invite_hash.startswith('AAAA') or len(invite_hash) > 15):
                # –≠—Ç–æ –∏–Ω–≤–∞–π—Ç-—Ö–µ—à, –∏—Å–ø–æ–ª—å–∑—É–µ–º ImportChatInviteRequest
                logger.info(f"üîó [GROUP] [{account_number}] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–≤–∞–π—Ç-—Ö–µ—à –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è")
                result = await client(ImportChatInviteRequest(invite_hash))
                logger.info(f"‚úÖ [GROUP] [{account_number}] –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É –ø–æ –∏–Ω–≤–∞–π—Ç-—Ö–µ—à—É")
                return True
            else:
                # –≠—Ç–æ username –≥—Ä—É–ø–ø—ã, –ø—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç—É–ø–∏—Ç—å –∫–∞–∫ –≤ –∫–∞–Ω–∞–ª
                logger.info(f"üè∑Ô∏è [GROUP] [{account_number}] –ò—Å–ø–æ–ª—å–∑—É–µ–º username –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è: @{invite_hash}")
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã
                    group_entity = await client.get_entity(invite_hash)
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç—É–ø–∏—Ç—å –∫–∞–∫ –≤ –∫–∞–Ω–∞–ª
                    await client(JoinChannelRequest(group_entity))
                    logger.info(f"‚úÖ [GROUP] [{account_number}] –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É –ø–æ username")
                    return True
                    
                except UserAlreadyParticipantError:
                    logger.info(f"‚ÑπÔ∏è [GROUP] [{account_number}] –£–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã")
                    return True
                    
                except (UsernameNotOccupiedError, UsernameInvalidError):
                    logger.warning(f"‚ö†Ô∏è [GROUP] [{account_number}] –ì—Ä—É–ø–ø–∞ —Å username @{invite_hash} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return False
                    
        except UserAlreadyParticipantError:
            logger.info(f"‚ÑπÔ∏è [GROUP] [{account_number}] –£–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã")
            return True
            
        except InviteHashExpiredError:
            logger.error(f"‚ùå [GROUP] [{account_number}] –ò–Ω–≤–∞–π—Ç —Å—Å—ã–ª–∫–∞ –∏—Å—Ç–µ–∫–ª–∞")
            return False
            
        except InviteHashInvalidError:
            logger.error(f"‚ùå [GROUP] [{account_number}] –ò–Ω–≤–∞–π—Ç —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")
            return False
            
        except FloodWaitError as e:
            logger.warning(f"‚è≥ [GROUP] [{account_number}] –ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.seconds} —Å–µ–∫—É–Ω–¥")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå [GROUP] [{account_number}] –û—à–∏–±–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {type(e).__name__}: {e}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå [GROUP] [{account_number}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}: {e}")
        return False

async def post_comment_with_session(
        session_data: str,
        message: Message,
        comment_text: str,
        like_chance: int = 20,
        available_reactions: list = None,
        invite_link: str = None,
        account_number: str = "unknown",
        channel_username: str = None
) -> dict:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç–∞–º –≤ –≥—Ä—É–ø–ø–∞—Ö —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª –∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –≤ –≥—Ä—É–ø–ø—É"""
    client = None
    result = {
        "success": False,
        "comment_sent": False,
        "like_given": False,
        "comment_id": None,
        "error": None,
        "joined_group": False,
        "joined_channel": False
    }
    
    try:
        client = TelegramClient(
            StringSession(session_data),
            api_id=config.API_ID,
            api_hash=config.API_HASH
        )

        await client.connect()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Å—É—â–Ω–æ—Å—Ç—å –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≥—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π)
        target_entity = message.chat.id
        logger.info(f"üìç [TARGET] [{account_number}] –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –≤ –≥—Ä—É–ø–ø–µ: {target_entity}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        logger.info(f"üêõ [COMMENT DEBUG] [{account_number}] –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:")
        logger.info(f"  Text: '{comment_text}'")
        logger.info(f"  Length: {len(comment_text)}")
        logger.info(f"  Target group: {target_entity}")
        logger.info(f"  Invite link: {invite_link}")
        logger.info(f"  Channel username: {channel_username}")

        # 1. –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω username)
        if channel_username:
            channel_join_success = await join_channel_by_username(client, channel_username, account_number)
            result["joined_channel"] = channel_join_success
            
            if channel_join_success:
                # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
                delay = random.uniform(2, 5)
                logger.info(f"‚è±Ô∏è [CHANNEL] [{account_number}] –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª: {delay:.2f} —Å–µ–∫")
                await asyncio.sleep(delay)
        else:
            logger.info(f"‚ÑπÔ∏è [CHANNEL] [{account_number}] Username –∫–∞–Ω–∞–ª–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")

        # 2. –í—Å—Ç—É–ø–∞–µ–º –≤ –≥—Ä—É–ø–ø—É –ø–æ –∏–Ω–≤–∞–π—Ç —Å—Å—ã–ª–∫–µ (–µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞)
        if invite_link:
            group_join_success = await join_group_by_invite(client, invite_link, account_number)
            result["joined_group"] = group_join_success
            
            if group_join_success:
                # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
                delay = random.uniform(3, 8)
                logger.info(f"‚è±Ô∏è [GROUP] [{account_number}] –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {delay:.2f} —Å–µ–∫")
                await asyncio.sleep(delay)
            else:
                logger.warning(f"‚ö†Ô∏è [GROUP] [{account_number}] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è")
        else:
            logger.info(f"‚ÑπÔ∏è [GROUP] [{account_number}] –ò–Ω–≤–∞–π—Ç —Å—Å—ã–ª–∫–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞")

        # 3. –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—É –≤–º–µ—Å—Ç–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            view_peer = await client.get_input_entity(target_entity)
            logger.info(f"üëÄ [VIEW] [{account_number}] –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—É: {target_entity}")
                
            await client(GetMessagesViewsRequest(
                peer=view_peer,
                id=[message.message_id],
                increment=True
            ))
            logger.debug(f"‚úÖ [VIEW] [{account_number}] –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ {message.message_id} –≤—ã–ø–æ–ª–Ω–µ–Ω")
        except Exception as e:
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ —É–¥–∞–ª—Å—è
            logger.warning(f"‚ö†Ô∏è [VIEW] [{account_number}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–æ—Å—Ç–∞: {type(e).__name__}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞

        # 4. –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        delay = random.uniform(10, 25)
        logger.info(f"‚è±Ô∏è [DELAY] [{account_number}] –ñ–¥–µ–º {delay:.2f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
        await asyncio.sleep(delay)

        # 5. –°—Ç–∞–≤–∏–º –ª–∞–π–∫ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —à–∞–Ω—Å–æ–º
        if random.randint(1, 100) <= like_chance:
            try:
                if not available_reactions:
                    available_reactions = [
                        ReactionEmoji(emoticon="‚ù§Ô∏è"),
                        ReactionEmoji(emoticon="üëç"),
                        ReactionEmoji(emoticon="üî•")
                    ]
                
                selected_reaction = random.choice(available_reactions)
                
                # –î–ª—è –ª–∞–π–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä—É–ø–ø—É –≤–º–µ—Å—Ç–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                reaction_peer = await client.get_input_entity(target_entity)
                    
                await client(SendReactionRequest(
                    peer=reaction_peer,
                    msg_id=message.message_id,
                    reaction=[selected_reaction]
                ))
                result["like_given"] = True
                logger.debug(f"üëç [LIKE] [{account_number}] –ü–æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∞–π–∫ –Ω–∞ –ø–æ—Å—Ç {message.message_id}")
            except Exception as e:
                # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –ª–∞–π–∫ –Ω–µ —É–¥–∞–ª—Å—è
                logger.warning(f"‚ö†Ô∏è [LIKE] [{account_number}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {type(e).__name__}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ –ª–∞–π–∫–∞

        # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
        logger.info(f"üí¨ [COMMENT] [{account_number}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –≥—Ä—É–ø–ø—É {target_entity}")
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await asyncio.sleep(random.uniform(1, 3))
            
            sent_message = await client.send_message(
                entity=target_entity,  # –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                reply_to=message.message_id,
                message=comment_text
            )
            result["comment_sent"] = True
            result["comment_id"] = sent_message.id
            result["success"] = True
            logger.info(f"‚úÖ [COMMENT] [{account_number}] –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (ID: {sent_message.id})")

        except TypeNotFoundError as e:
            logger.warning(f"‚ö†Ô∏è [COMMENT] [{account_number}] –û—à–∏–±–∫–∞ —Å—Ö–µ–º—ã Telethon - –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...")
            
            # –ñ–î–ï–ú 2 –ú–ò–ù–£–¢–´ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            wait_time = 120  # 2 –º–∏–Ω—É—Ç—ã
            logger.info(f"‚è∞ [COMMENT] [{account_number}] –ñ–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
            await asyncio.sleep(wait_time)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            comment_found = False
            try:
                logger.info(f"üîç [COMMENT] [{account_number}] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ...")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã
                recent_messages = await client.get_messages(target_entity, limit=10)
                
                for msg in recent_messages:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º: —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞—à –ø–æ—Å—Ç –ò —Ç–µ–∫—Å—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç
                    if (hasattr(msg, 'reply_to') and 
                        msg.reply_to and 
                        hasattr(msg.reply_to, 'reply_to_msg_id') and
                        msg.reply_to.reply_to_msg_id == message.message_id and
                        msg.message and
                        msg.message.strip() == comment_text.strip()):
                        
                        # –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –ù–ê–ô–î–ï–ù!
                        result["comment_sent"] = True
                        result["comment_id"] = msg.id
                        result["success"] = True
                        comment_found = True
                        logger.info(f"‚úÖ [COMMENT] [{account_number}] –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –£–ñ–ï –û–¢–ü–†–ê–í–õ–ï–ù! –ù–∞–π–¥–µ–Ω ID: {msg.id}")
                        break
                
                if not comment_found:
                    logger.info(f"‚ùå [COMMENT] [{account_number}] –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ù–ï –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ")
                    
                    # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                    try:
                        await client.disconnect()
                        await asyncio.sleep(2)
                        
                        client = TelegramClient(StringSession(session_data), api_id=config.API_ID, api_hash=config.API_HASH)
                        await client.connect()
                        
                        sent_message = await client.send_message(
                            entity=target_entity, 
                            reply_to=message.message_id, 
                            message=comment_text
                        )
                        result["comment_sent"] = True
                        result["comment_id"] = sent_message.id
                        result["success"] = True
                        logger.info(f"‚úÖ [COMMENT] [{account_number}] –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (ID: {sent_message.id})")
                        
                    except Exception as retry_error:
                        result["error"] = f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(retry_error)}"
                        logger.error(f"‚ùå [COMMENT] [{account_number}] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {retry_error}")
                else:
                    logger.info(f"üéâ [COMMENT] [{account_number}] –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–∂–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –¥—É–±–ª—å –Ω–µ –Ω—É–∂–µ–Ω")
                    
            except Exception as check_error:
                logger.error(f"‚ùå [COMMENT] [{account_number}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {check_error}")
                result["error"] = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(check_error)}"

        except ChatWriteForbiddenError:
            result["error"] = "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ"
            logger.warning(f"‚õî [COMMENT] [{account_number}] –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        except ChatAdminRequiredError:
            result["error"] = "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            logger.warning(f"üîê [COMMENT] [{account_number}] –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        except ChannelPrivateError:
            result["error"] = "–ì—Ä—É–ø–ø–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞"
            logger.warning(f"üîí [COMMENT] [{account_number}] –ì—Ä—É–ø–ø–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        except FloodWaitError as e:
            result["error"] = f"–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–∂–∏–¥–∞–Ω–∏–µ {e.seconds} —Å–µ–∫—É–Ω–¥"
            logger.warning(f"‚è≥ [COMMENT] [{account_number}] –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–∂–∏–¥–∞–Ω–∏–µ {e.seconds} —Å–µ–∫—É–Ω–¥")
            
        except Exception as e:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
            error_msg = str(e)
            if "TypeNotFoundError" in error_msg or "Constructor ID" in error_msg:
                result["error"] = "–û—à–∏–±–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ Telegram, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
                logger.warning(f"üîß [COMMENT] [{account_number}] –û—à–∏–±–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ Telegram: {type(e).__name__}")
            else:
                result["error"] = f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {type(e).__name__}"
                logger.warning(f"‚ö†Ô∏è [COMMENT] [{account_number}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {type(e).__name__}: {str(e)[:100]}")

    except Exception as e:
        result["error"] = f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}: {e}"
        logger.error(f"‚ö†Ô∏è [COMMENT] [{account_number}] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {type(e).__name__}: {str(e)[:100]}")
    finally:
        if client:
            try:
                await client.disconnect()
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    
    return result

async def like_comment_with_session(
        session_data: str,
        group_id: int,
        comment_id: int,
        available_reactions: list = None,
        account_number: str = "unknown"
) -> bool:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–∞–π–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π"""
    client = None
    try:
        client = TelegramClient(
            StringSession(session_data),
            api_id=config.API_ID,
            api_hash=config.API_HASH
        )

        await client.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã –¥–ª—è –ª–∞–π–∫–∞
        try:
            input_peer = await client.get_input_entity(group_id)
            logger.info(f"üëç [LIKE] [{account_number}] –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –ª–∞–π–∫–∞: {group_id}")
        except Exception as e:
            logger.error(f"‚ùå [LIKE] [{account_number}] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ {group_id}: {e}")
            return False

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ª–∞–π–∫–æ–º
        delay = random.uniform(5, 15)
        logger.info(f"‚è±Ô∏è [LIKE] [{account_number}] –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ª–∞–π–∫–æ–º: {delay:.2f} —Å–µ–∫")
        await asyncio.sleep(delay)

        if not available_reactions:
            available_reactions = [
                ReactionEmoji(emoticon="‚ù§Ô∏è"),
                ReactionEmoji(emoticon="üëç"),
                ReactionEmoji(emoticon="üî•")
            ]

        selected_reaction = random.choice(available_reactions)
        await client(SendReactionRequest(
            peer=input_peer,
            msg_id=comment_id,
            reaction=[selected_reaction]
        ))
        
        logger.info(f"üëç [LIKE] [{account_number}] –õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment_id} –≤ –≥—Ä—É–ø–ø–µ {group_id}")
        return True

    except Exception as e:
        logger.error(f"‚ö†Ô∏è [LIKE] [{account_number}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–∞–π–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è {comment_id}: {type(e).__name__}: {e}")
        return False
    finally:
        if client:
            try:
                await client.disconnect()
            except:
                pass
