# handlers.py
import logging
from datetime import datetime, timedelta

from aiogram import Router
from aiogram.types import Message
from src.db.models import Channel, AIAgent, Account, PostActivity
from src.db import get_session
from src.ai.requests import request
from sqlalchemy import select, func, and_
import random
from typing import List
from aiogram import F
from src.tasks.tasks import CommentTask, CommentTaskMessage, LikeCommentTask, LikeCommentTaskMessage
from src.cfg import config

broker = config.broker

router = Router()

logger = logging.getLogger(__name__)

def clean_comments(raw_comments: str) -> List[str]:
    """
    –û—á–∏—â–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∏—Å—Ç—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç: (1) —Ç–µ–∫—Å—Ç, (2) —Ç–µ–∫—Å—Ç, –∏ —Ç.–¥.
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–±–∏—Ä–∞–µ—Ç –Ω—É–º–µ—Ä–∞—Ü–∏—é –∏–∑ –∏—Ç–æ–≥–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
    """
    comments = []
    
    logger.info(f"üîç [PARSE] –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –ò–ò...")
    logger.info(f"üìÑ [PARSE] –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {raw_comments[:500]}...")
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    lines = raw_comments.split('\n')
    logger.info(f"üìÑ [PARSE] –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
    
    for i, line in enumerate(lines):
        line = line.strip()
        if not line:
            continue
            
        logger.debug(f"üìÑ [PARSE] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É {i+1}: '{line[:100]}...'")
        
        comment = None
        
        # –§–æ—Ä–º–∞—Ç: (1) –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, (2) –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —Ç.–¥.
        if line.startswith('(') and ')' in line:
            # –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
            closing_paren = line.find(')')
            if closing_paren != -1:
                comment = line[closing_paren + 1:].strip()
                    
        # –§–æ—Ä–º–∞—Ç: 1) –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, 2) –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —Ç.–¥.
        elif line and line[0].isdigit() and ')' in line:
            comment = line.split(')', 1)[1].strip()
                
        # –§–æ—Ä–º–∞—Ç: 1. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, 2. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —Ç.–¥.
        elif line and line[0].isdigit() and '.' in line:
            comment = line.split('.', 1)[1].strip()
        
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        if comment and len(comment) > 5:
            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê: —É–±–∏—Ä–∞–µ–º –ª—é–±—É—é –æ—Å—Ç–∞–≤—à—É—é—Å—è –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤ –Ω–∞—á–∞–ª–µ
            # –£–±–∏—Ä–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "(14)" –∏–ª–∏ "14)" –∏–ª–∏ "14." –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
            import re
            comment = re.sub(r'^\s*\(\d+\)\s*', '', comment)  # –£–±–∏—Ä–∞–µ–º (14) –≤ –Ω–∞—á–∞–ª–µ
            comment = re.sub(r'^\s*\d+\)\s*', '', comment)    # –£–±–∏—Ä–∞–µ–º 14) –≤ –Ω–∞—á–∞–ª–µ  
            comment = re.sub(r'^\s*\d+\.\s*', '', comment)    # –£–±–∏—Ä–∞–µ–º 14. –≤ –Ω–∞—á–∞–ª–µ
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            comment = ' '.join(comment.split())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            if len(comment) > 5:
                comments.append(comment)
                logger.info(f"‚úÖ [CLEAN] –û—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '{comment[:100]}...'")
            else:
                logger.debug(f"‚ö†Ô∏è [CLEAN] –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: '{comment}'")
    
    logger.info(f"üìä [PARSE] –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(comments)}")
    
    return comments

async def get_random_accounts(session, count: int, channel_id: int) -> List[Account]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞."""
    result = await session.execute(
        select(Account)
        .where(Account.status == 'active')
        .where(Account.channel_id == channel_id)
        .order_by(func.random())
        .limit(count)
    )
    return result.scalars().all()

async def should_comment_on_post(session, channel: Channel, channel_name: str, post_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–∞"""
    
    logger.info(f"üé≤ [CHANCE] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —à–∞–Ω—Å–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    base_roll = random.randint(1, 100)
    logger.info(f"üé≤ [CHANCE] –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å: {base_roll} vs {channel.comments_chance}%")
    if base_roll > channel.comments_chance:
        logger.info(f"‚ùå [CHANCE] –ü–æ—Å—Ç {post_id} –ø—Ä–æ–ø—É—â–µ–Ω –ø–æ –±–∞–∑–æ–≤–æ–º—É —à–∞–Ω—Å—É –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ({base_roll} > {channel.comments_chance})")
        return False
    logger.info(f"‚úÖ [CHANCE] –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –ø—Ä–æ–π–¥–µ–Ω")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–Ω—Å –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞
    selection_roll = random.randint(1, 100)
    logger.info(f"üé≤ [CHANCE] –®–∞–Ω—Å –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞: {selection_roll} vs {channel.post_selection_chance}%")
    if selection_roll > channel.post_selection_chance:
        logger.info(f"‚ùå [CHANCE] –ü–æ—Å—Ç {post_id} –ø—Ä–æ–ø—É—â–µ–Ω –ø–æ —à–∞–Ω—Å—É –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞ ({selection_roll} > {channel.post_selection_chance})")
        return False
    logger.info(f"‚úÖ [CHANCE] –®–∞–Ω—Å –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
    logger.info(f"‚è∞ [INTERVAL] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏...")
    last_activity = await session.execute(
        select(PostActivity)
        .where(PostActivity.channel_name == channel_name)
        .order_by(PostActivity.last_comment_time.desc())
        .limit(1)
    )
    last_activity = last_activity.scalar_one_or_none()
    
    if last_activity:
        time_since_last = datetime.now() - last_activity.last_comment_time
        min_interval = timedelta(minutes=channel.post_min_interval)
        
        logger.info(f"‚è∞ [INTERVAL] –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity.last_comment_time}")
        logger.info(f"‚è∞ [INTERVAL] –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {time_since_last}")
        logger.info(f"‚è∞ [INTERVAL] –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {min_interval}")
        
        if time_since_last < min_interval:
            logger.info(f"‚ùå [INTERVAL] –ü–æ—Å—Ç {post_id} –ø—Ä–æ–ø—É—â–µ–Ω - —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
            logger.info(f"    –ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –µ—â–µ: {min_interval - time_since_last}")
            return False
        logger.info(f"‚úÖ [INTERVAL] –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–±–ª—é–¥–µ–Ω")
    else:
        logger.info(f"‚ÑπÔ∏è [INTERVAL] –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –º–æ–∂–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å")
    
    logger.info(f"üéâ [CHANCE] –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ü–æ—Å—Ç {post_id} –±—É–¥–µ—Ç –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω")
    return True

async def update_post_activity(session, channel_name: str, post_id: int, comments_count: int, likes_count: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –ø–æ—Å—Ç—É"""
    activity = await session.execute(
        select(PostActivity)
        .where(and_(
            PostActivity.channel_name == channel_name,
            PostActivity.post_id == post_id
        ))
    )
    activity = activity.scalar_one_or_none()
    
    if activity:
        activity.last_comment_time = datetime.now()
        activity.total_comments += comments_count
        activity.total_likes += likes_count
    else:
        new_activity = PostActivity(
            channel_name=channel_name,
            post_id=post_id,
            last_comment_time=datetime.now(),
            total_comments=comments_count,
            total_likes=likes_count
        )
        session.add(new_activity)

async def find_channel_by_group_id(session, group_id: int, sender_chat_id: int = None) -> Channel:
    """–ù–∞—Ö–æ–¥–∏—Ç –∫–∞–Ω–∞–ª –ø–æ ID –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å –∞–≤—Ç–æ—Å–≤—è–∑—ã–≤–∞–Ω–∏–µ–º"""
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—Ä–µ–¥–∏ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö ID –≥—Ä—É–ø–ø
    result = await session.execute(
        select(Channel).where(Channel.discussion_group_id == group_id)
    )
    channel = result.scalar_one_or_none()
    
    if channel:
        logger.info(f"‚úÖ [FIND] –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω –ø–æ discussion_group_id: {channel.name}")
        return channel
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –µ—Å—Ç—å sender_chat_id, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ ID –∫–∞–Ω–∞–ª–∞-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    if sender_chat_id:
        logger.info(f"üîç [FIND] –ò—â–µ–º –∫–∞–Ω–∞–ª –ø–æ ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {sender_chat_id}")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã ID –∫–∞–Ω–∞–ª–∞
        search_variants = [
            str(sender_chat_id),  # –ü–æ–ª–Ω—ã–π ID: -1002242368150
            str(abs(sender_chat_id)),  # –ë–µ–∑ –º–∏–Ω—É—Å–∞: 1002242368150
            str(sender_chat_id)[4:] if len(str(abs(sender_chat_id))) > 10 else str(abs(sender_chat_id)),  # –£–±–∏—Ä–∞–µ–º -100: 2242368150
        ]
        
        # –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ username, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª —Å–≤—è–∑–∞–Ω —Å —ç—Ç–∏–º ID
        for variant in search_variants:
            logger.info(f"üîç [FIND] –ü—Ä–æ–±—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç ID: '{variant}'")
            result = await session.execute(
                select(Channel).where(Channel.name == variant)
            )
            channel = result.scalar_one_or_none()
            if channel:
                logger.info(f"‚úÖ [FIND] –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É ID: {channel.name}")
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∑—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª —Å –≥—Ä—É–ø–ø–æ–π
                logger.info(f"üîó [LINK] –ê–≤—Ç–æ—Å–≤—è–∑—ã–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ {channel.name} —Å –≥—Ä—É–ø–ø–æ–π {group_id}")
                channel.discussion_group_id = group_id
                session.add(channel)
                await session.commit()
                logger.info(f"‚úÖ [LINK] –ö–∞–Ω–∞–ª {channel.name} —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å –≥—Ä—É–ø–ø–æ–π {group_id}")
                
                return channel
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID, –∏—â–µ–º —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    logger.info(f"üîç [FIND] –ò—â–µ–º —Å—Ä–µ–¥–∏ –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã...")
    all_channels = await session.execute(
        select(Channel).where(Channel.discussion_group_id.is_(None))
    )
    
    channels_without_group = list(all_channels.scalars())
    logger.info(f"üìã [FIND] –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ –≥—Ä—É–ø–ø—ã: {len(channels_without_group)}")
    
    for channel in channels_without_group:
        logger.info(f"üîç [FIND] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª: {channel.name}")
        
        # –ï—Å–ª–∏ —É –∫–∞–Ω–∞–ª–∞ –µ—Å—Ç—å –∏–Ω–≤–∞–π—Ç —Å—Å—ã–ª–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤—è–∑—å
        if channel.discussion_group_invite:
            logger.info(f"üîó [FIND] –ö–∞–Ω–∞–ª {channel.name} –∏–º–µ–µ—Ç –∏–Ω–≤–∞–π—Ç —Å—Å—ã–ª–∫—É, –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Å–≤—è–∑—ã–≤–∞–Ω–∏–µ...")
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–≤—è–∑—ã–≤–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø–æ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ Telegram API
            # –ù–æ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ —Å–≤—è–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
            logger.info(f"üîó [LINK] –ê–≤—Ç–æ—Å–≤—è–∑—ã–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ {channel.name} —Å –≥—Ä—É–ø–ø–æ–π {group_id}")
            channel.discussion_group_id = group_id
            session.add(channel)
            await session.commit()
            logger.info(f"‚úÖ [LINK] –ö–∞–Ω–∞–ª {channel.name} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω —Å –≥—Ä—É–ø–ø–æ–π {group_id}")
            
            return channel
    
    logger.warning(f"‚ùå [FIND] –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}")
    logger.warning(f"üí° [HINT] –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π")
    return None

def ensure_unique_comments(comments: List[str], actual_count: int) -> List[str]:
    """
    –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
    –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
    """
    if not comments:
        logger.warning(f"‚ö†Ô∏è [UNIQUE] –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø—É—Å—Ç–æ–π")
        return []
    
    logger.info(f"üîÄ [UNIQUE] –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")
    logger.info(f"üìä [UNIQUE] –î–æ—Å—Ç—É–ø–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(comments)}, –Ω—É–∂–Ω–æ: {actual_count}")
    
    # 1. –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    available_comments = comments.copy()
    
    # 2. –¢–©–ê–¢–ï–õ–¨–ù–û –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
    for _ in range(3):  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º 3 —Ä–∞–∑–∞ –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏
        random.shuffle(available_comments)
    
    logger.info(f"üîÄ [UNIQUE] –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ—à–∞–Ω")
    
    # 3. –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –Ω—É–∂–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É - –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ
    if len(available_comments) >= actual_count:
        selected_comments = available_comments[:actual_count]
        logger.info(f"‚úÖ [UNIQUE] –í—ã–±—Ä–∞–Ω–æ {len(selected_comments)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        for i, comment in enumerate(selected_comments):
            logger.debug(f"üìù [UNIQUE] –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {i+1}: '{comment[:50]}...'")
        
        return selected_comments
    
    # 4. –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –º–µ–Ω—å—à–µ —á–µ–º –Ω—É–∂–Ω–æ - –¥—É–±–ª–∏—Ä—É–µ–º —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
    selected_comments = []
    variations_suffixes = [
        "",  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
        " üëç",
        " üî•", 
        " ‚ú®",
        " üíØ",
        " üéØ",
        " üëè",
        " üí™"
    ]
    
    logger.info(f"‚ö†Ô∏è [UNIQUE] –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –º–µ–Ω—å—à–µ —á–µ–º –Ω—É–∂–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏...")
    
    comment_index = 0
    variation_index = 0
    
    for i in range(actual_count):
        # –ë–µ—Ä–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        base_comment = available_comments[comment_index % len(available_comments)]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏—é (—Å—É—Ñ—Ñ–∏–∫—Å)
        if variation_index < len(variations_suffixes):
            final_comment = base_comment + variations_suffixes[variation_index]
        else:
            # –ï—Å–ª–∏ —Å—É—Ñ—Ñ–∏–∫—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä
            final_comment = base_comment + f" #{variation_index - len(variations_suffixes) + 1}"
        
        selected_comments.append(final_comment)
        
        logger.debug(f"üìù [UNIQUE] –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {i+1}: '{final_comment[:50]}...'")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
        comment_index += 1
        
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∏ –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –≤–∞—Ä–∏–∞—Ü–∏–∏
        if comment_index >= len(available_comments):
            comment_index = 0
            variation_index += 1
    
    logger.info(f"‚úÖ [UNIQUE] –°–æ–∑–¥–∞–Ω–æ {len(selected_comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏")
    return selected_comments

# –ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä: —Å–ª—É—à–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö
@router.message(F.chat.type == 'supergroup')
async def post_commenting(message: Message):
    logger.info(f"üîç [DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ:")
    logger.info(f"  Chat ID: {message.chat.id}")
    logger.info(f"  Chat title: {message.chat.title}")
    logger.info(f"  Chat username: {message.chat.username}")
    logger.info(f"  From user: {message.from_user.id if message.from_user else None}")
    logger.info(f"  Sender chat: {message.sender_chat.id if message.sender_chat else None}")
    logger.info(f"  Message ID: {message.message_id}")
    logger.info(f"  Text: {message.text[:100] if message.text else 'No text'}")
    logger.info(f"  Caption: {message.caption[:100] if message.caption else 'No caption'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Å—Ç –æ—Ç –∫–∞–Ω–∞–ª–∞ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
    if not message.sender_chat:
        logger.info(f"‚è≠Ô∏è [SKIP] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –∫–∞–Ω–∞–ª–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    
    logger.info(f"üéØ [HANDLER] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç –æ—Ç –∫–∞–Ω–∞–ª–∞ –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π!")
    logger.info(f"  –ì—Ä—É–ø–ø–∞: {message.chat.title} (ID: {message.chat.id})")
    logger.info(f"  –ö–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {message.sender_chat.id}")
    logger.info(f"  Post ID: {message.message_id}")
    
    async with get_session() as session:
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–∞–ª –ø–æ ID –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å –∞–≤—Ç–æ—Å–≤—è–∑—ã–≤–∞–Ω–∏–µ–º
            channel = await find_channel_by_group_id(
                session, 
                message.chat.id, 
                message.sender_chat.id if message.sender_chat else None
            )
            
            if not channel:
                logger.warning(f"‚ùå [DB] –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {message.chat.id}")
                logger.warning(f"    –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É")
                return
            
            logger.info(f"‚úÖ [DB] –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª: {channel.name}")
            
            # –ï—Å–ª–∏ —É –∫–∞–Ω–∞–ª–∞ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω ID –≥—Ä—É–ø–ø—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ (—É–∂–µ —Å–¥–µ–ª–∞–Ω–æ –≤ find_channel_by_group_id)
            if not channel.discussion_group_id:
                channel.discussion_group_id = message.chat.id
                await session.commit()
                logger.info(f"üíæ [DB] –°–æ—Ö—Ä–∞–Ω–µ–Ω ID –≥—Ä—É–ø–ø—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel.name}: {message.chat.id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç
            logger.info(f"üé≤ [CHANCE] –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–Ω—Å—ã –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
            should_comment = await should_comment_on_post(session, channel, channel.name, message.message_id)
            logger.info(f"üé≤ [CHANCE] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {should_comment}")
            
            if not should_comment:
                logger.info(f"‚è≠Ô∏è [SKIP] –ü–æ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            logger.info(f"ü§ñ [AI] –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel.id}")
            agent = await session.execute(
                select(AIAgent)
                .where(
                    AIAgent.channel_id == channel.id,
                    AIAgent.status == True
                )
            )
            agent = agent.scalar_one_or_none()

            if not agent:
                logger.warning(f"‚ùå [AI] –î–ª—è –∫–∞–Ω–∞–ª–∞ {channel.name} –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∞–≥–µ–Ω—Ç")
                return
            
            logger.info(f"‚úÖ [AI] –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∞–≥–µ–Ω—Ç: {agent.description} (API_ID: {agent.api_id})")

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ò–ò
            content = message.text or message.caption or ""
            logger.info(f"üìù [CONTENT] –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ò–ò: {content[:200]}...")

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
            logger.info(f"ü§ñ [AI] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –∞–≥–µ–Ω—Ç—É...")
            try:
                response = await request(
                    agent_id=agent.api_id,
                    content=content
                )
                logger.info(f"‚úÖ [AI] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
                logger.info(f"üìÑ [AI] –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞: {response[:300]}...")
            except Exception as e:
                logger.error(f"‚ùå [AI] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò: {e}")
                return

            # –ü–∞—Ä—Å–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            comments = clean_comments(response)
            logger.info(f"üí¨ [PARSE] –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(comments)}")
            
            if not comments:
                logger.warning(f"‚ö†Ô∏è [PARSE] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò")
                return

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            comments_count = channel.comments_number
            comments_spread = channel.comments_number_range
            actual_count = max(1, min(
                comments_count + random.randint(-comments_spread, comments_spread),
                len(comments)
            ))
            logger.info(f"üìä [COUNT] –ë–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {comments_count}, —Ä–∞–∑–±—Ä–æ—Å: {comments_spread}")
            logger.info(f"üìä [COUNT] –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {actual_count}")
            
            # –£–õ–£–ß–®–ï–ù–ù–´–ô –≤—ã–±–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            selected_comments = ensure_unique_comments(comments, actual_count)
            logger.info(f"‚úÖ [SELECT] –í—ã–±—Ä–∞–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(selected_comments)}")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            logger.info(f"üë• [ACCOUNTS] –ò—â–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel.id}...")
            accounts = await get_random_accounts(session, actual_count, channel.id)
            logger.info(f"üë• [ACCOUNTS] –ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}")
            
            if not accounts:
                logger.warning(f"‚ùå [ACCOUNTS] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
                return

            # –ü–∞—Ä—Å–∏–º —Ç–∏–ø—ã —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è –ª–∞–π–∫–æ–≤
            reaction_types = [r.strip() for r in channel.likes_reaction_types.split(',') if r.strip()]
            logger.info(f"üëç [REACTIONS] –¢–∏–ø—ã —Ä–µ–∞–∫—Ü–∏–π: {reaction_types}")

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            comment_tasks = []
            
            for i, comment in enumerate(selected_comments):
                if i < len(accounts):
                    task = CommentTask(
                        account_session=accounts[i].session,
                        account_number=accounts[i].number,
                        channel=channel.name,
                        channel_id=channel.id,
                        post_id=message.message_id,
                        comment_text=comment,
                        delay=random.uniform(5, 15),
                        like_chance=channel.likes_on_posts_chance,
                        reaction_types=reaction_types,
                        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
                        discussion_group_id=message.chat.id,  # ID –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                        sender_chat_id=message.sender_chat.id,  # ID –∫–∞–Ω–∞–ª–∞-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                        invite_link=channel.discussion_group_invite,  # –ò–Ω–≤–∞–π—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
                        channel_username=channel.name  # Username –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–û!
                    )
                    comment_tasks.append(task)
                    logger.info(f"üìù [TASK] –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {accounts[i].number}: {comment[:50]}...")
                    logger.info(f"üîç [DEBUG] Channel username –≤ –∑–∞–¥–∞—á–µ: {channel.name}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–æ–∫–µ—Ä
            try:
                logger.info(f"üì® [BROKER] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±—Ä–æ–∫–µ—Ä—É...")
                await broker.connect()
                logger.info(f"‚úÖ [BROKER] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")

                logger.info(f"üì® [BROKER] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(comment_tasks)} –∑–∞–¥–∞—á –≤ –∫–∞–Ω–∞–ª comment_tasks")
                result = await broker.publish(
                    message=CommentTaskMessage(data=comment_tasks),
                    channel="comment_tasks"
                )
                logger.info(f"‚úÖ [BROKER] –ó–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –ª–∞–π–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥—Ä—É–≥–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                if channel.likes_on_comments_chance > 0:
                    logger.info(f"üëç [LIKES] –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –ª–∞–π–∫–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (—à–∞–Ω—Å: {channel.likes_on_comments_chance}%)")
                    like_tasks = await create_comment_like_tasks(
                        session, channel, channel.name, 
                        comment_tasks, reaction_types
                    )
                    
                    if like_tasks:
                        logger.info(f"üì® [BROKER] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(like_tasks)} –∑–∞–¥–∞—á –ª–∞–π–∫–æ–≤")
                        await broker.publish(
                            message=LikeCommentTaskMessage(data=like_tasks),
                            channel="like_comment_tasks"
                        )
                        logger.info(f"‚úÖ [BROKER] –ó–∞–¥–∞—á–∏ –ª–∞–π–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
                    else:
                        logger.info(f"‚ÑπÔ∏è [LIKES] –ó–∞–¥–∞—á–∏ –ª–∞–π–∫–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")

                await broker.close()
                logger.info(f"üîå [BROKER] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                logger.info(f"üìä [STATS] –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
                await update_post_activity(
                    session, channel.name, message.message_id, 
                    len(comment_tasks), 0  # –ª–∞–π–∫–∏ –±—É–¥—É—Ç –ø–æ–¥—Å—á–∏—Ç–∞–Ω—ã –ø–æ–∑–∂–µ
                )
                await session.commit()
                logger.info(f"‚úÖ [STATS] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

            except Exception as e:
                logger.error(f"‚ùå [BROKER] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±—Ä–æ–∫–µ—Ä–æ–º: {str(e)}")
                raise

            logger.info(f"üéâ [SUCCESS] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

        except Exception as e:
            logger.error(f"‚ùå [ERROR] –û—à–∏–±–∫–∞ –≤ post_commenting: {str(e)}")
            await session.rollback()
            raise

async def create_comment_like_tasks(
    session, channel: Channel, channel_name: str, 
    comment_tasks: List[CommentTask], reaction_types: List[str]
) -> List[LikeCommentTask]:
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞ –ª–∞–π–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥—Ä—É–≥–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    like_tasks = []
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ª–∞–π–∫–æ–≤
    all_accounts = await session.execute(
        select(Account)
        .where(Account.channel_id == channel.id)
        .where(Account.status == 'active')
    )
    all_accounts = all_accounts.scalars().all()
    
    if len(all_accounts) < 2:  # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∞–∫–∫–∞—É–Ω—Ç–∞
        return like_tasks
    
    for comment_task in comment_tasks:
        # –í—ã–±–∏—Ä–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ª–∞–π–∫–Ω—É—Ç—å —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏—Å–∫–ª—é—á–∞—è –∞–≤—Ç–æ—Ä–∞)
        potential_likers = [acc for acc in all_accounts if acc.number != comment_task.account_number]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (1-3)
        likes_count = random.randint(1, min(3, len(potential_likers)))
        likers = random.sample(potential_likers, likes_count)
        
        for liker in likers:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–Ω—Å –ª–∞–π–∫–∞
            if random.randint(1, 100) <= channel.likes_on_comments_chance:
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª–∞–π–∫–∞ (–ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞)
                like_delay = comment_task.delay + random.uniform(30, 180)  # 30—Å–µ–∫ - 3–º–∏–Ω –ø–æ—Å–ª–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                
                like_task = LikeCommentTask(
                    account_session=liker.session,
                    account_number=liker.number,
                    channel=channel_name,
                    comment_id=0,  # –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                    target_comment_account=comment_task.account_number,
                    delay=like_delay,
                    reaction_types=reaction_types
                )
                like_tasks.append(like_task)
    
    return like_tasks
