from aiogram_dialog import Dialog, Window, ShowMode
from aiogram.types import CallbackQuery, ContentType
from aiogram_dialog.widgets.text import Const, Format
from aiogram_dialog.widgets.kbd import Button, Row, Url
from src.interfaces.users.states import menu, channels, settings, stats
from aiogram_dialog import DialogManager
from aiogram_dialog.widgets.media import StaticMedia
from pathlib import Path
from aiogram_dialog.widgets.kbd import SwitchTo
from .utils import on_click_empty_func
from sqlalchemy import select, func
from src.db import get_session
from src.db.models import Account

async def on_click_channels(call: CallbackQuery, button: Button, manager: DialogManager):
    await manager.start(show_mode=ShowMode.EDIT, state=channels.main_menu)

async def on_click_stats(call: CallbackQuery, button: Button, manager: DialogManager):
    await manager.start(show_mode=ShowMode.EDIT, state=stats.channel_select)

async def on_click_settings(call: CallbackQuery, button: Button, manager: DialogManager):
    await manager.start(show_mode=ShowMode.EDIT, state=settings.main_menu)

async def on_click_recovery(call: CallbackQuery, button: Button, manager: DialogManager):
    """–ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    from src.accounts.recovery import AccountRecoveryManager
    
    try:
        await call.answer("üîÑ –ó–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤...", show_alert=False)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        await AccountRecoveryManager.run_recovery_cycle()
        
        await call.answer("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.", show_alert=True)
        
    except Exception as e:
        await call.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}", show_alert=True)

async def get_main_menu_data(dialog_manager: DialogManager, **kwargs):
    """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    async with get_session() as session:
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        active_count = await session.scalar(
            select(func.count(Account.number)).where(Account.status == 'active')
        ) or 0
        
        pause_count = await session.scalar(
            select(func.count(Account.number)).where(Account.status == 'pause')
        ) or 0
        
        ban_count = await session.scalar(
            select(func.count(Account.number)).where(Account.status == 'ban')
        ) or 0
    
    return {
        "active_count": active_count,
        "pause_count": pause_count,
        "ban_count": ban_count,
        "total_count": active_count + pause_count + ban_count
    }

main_menu_window = Window(
    Format(
        '<b>–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ</b>\n\n'
        'üë• <b>–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b>\n'
        '‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}\n'
        '‚è∏ –ù–∞ –ø–∞—É–∑–µ: {pause_count}\n'
        'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {ban_count}\n'
        'üìä –í—Å–µ–≥–æ: {total_count}'
    ),
    Button(
        Const("üì∫ –ö–ê–ù–ê–õ–´"),
        id="channels_dialogs",
        on_click=on_click_channels
    ),
    Button(
        Const("‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò"),
        id="settings",
        on_click=on_click_settings
    ),
    Button(
        Const("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê"),
        id="statistic",
        on_click=on_click_stats
    ),
    state=menu.main_menu,
    getter=get_main_menu_data
)

menu_dialog = Dialog(main_menu_window)