import asyncio
import logging
from datetime import datetime
from pathlib import Path
from logging.handlers import RotatingFileHandler

from aiogram import Router

from src.cfg import config
import sys
from src.utils.uvloop_manager import UVLoopManager
from src.utils.params_manager import init_default_params
from aiogram_dialog import setup_dialogs
from src.interfaces import get_all_routers
from src.accounts.handlers import router as comments_router
from src.params.db_manager import DatabaseManager
from aiogram import Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.storage.redis import RedisStorage
from redis.asyncio import Redis

from src.db.db_manager import init_db, drop_db
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
from src.accounts.recovery import account_recovery_background_task

sys.stdout.reconfigure(encoding='utf-8')

async def main():
    uvloop_manager = UVLoopManager()
    bot = config.bot
    dp = config.dp

    # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    log_file = Path(__file__).parent.absolute() / 'logs' / 'app.log'

    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - [%(filename)s:%(lineno)d] - %(levelname)s - %(message)s',  # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        handlers=[
            RotatingFileHandler(
                log_file,
                maxBytes=100 * 1024 * 1024,  # 10 –ú–ë –Ω–∞ —Ñ–∞–π–ª
                backupCount=5,  # 5 —Ñ–∞–π–ª–æ–≤ —Ä–æ—Ç–∞—Ü–∏–∏ (–∏—Ç–æ–≥–æ 50 –ú–ë)
                encoding='utf-8',
                delay=False  # –ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –∑–∞–ø–∏—Å—å
            ),
            logging.StreamHandler()
        ]
    )
    logger = logging.getLogger(__name__)

    uvloop_manager.install()

    # 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    try:
        await init_db()
        logger.info("POSTGRES DB connected")
    except Exception as e:
        logger.error(f"DB error: {str(e)[:100]}")  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –æ—à–∏–±–∫–∏
        return

    try:
        async with DatabaseManager() as db:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            await db.set_parameter("bot_started", str(datetime.now()))
            await init_default_params()
            logging.info("PARAMS DB initialized")
    except Exception as e:
        logger.error(f"PARAMS DB error: {str(e)[:100]}")  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –æ—à–∏–±–∫–∏
        return

    logger.info("=== Bot starting ===")

    # 3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
    [dp.include_router(router) for router in get_all_routers()]
    dp.include_router(comments_router)
    setup_dialogs(dp)

    # 4. –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    recovery_task = asyncio.create_task(account_recovery_background_task())
    logger.info("üîÑ Account recovery task started")

    # 5. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        logger.info("Starting bot polling")
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logger.critical(f"Bot crash: {str(e)[:200]}")  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –¥–ª–∏–Ω–∞
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        recovery_task.cancel()
        try:
            await recovery_task
        except asyncio.CancelledError:
            logger.info("Recovery task cancelled")
        
        await bot.session.close()
        logger.info("Bot stopped")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("Stopped by user")
    except Exception as e:
        logging.critical(f"Fatal: {str(e)[:200]}")